{"version":3,"sources":["components/footer/footer.tsx","components/card/card.tsx","components/cardContainer/cardContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","href","React","Component","Card","props","classesToAddObj","styles","this","settings","adding","push","deleting","cardMoving","top","cardY","left","cardX","hidden","addingCard","join","ref","reference","className","style","onClick","deleteCard","cardNum","wait","milliseconds","a","Promise","resolve","setTimeout","CardContainer","state","cardsArr","containerHeight","divElement","setupDelete","bind","addCard","sortCards","indexToRemove","newCardsArr","filter","card","index","moveCards","setState","theArray","sort","b","setting","current","parentXY","getBoundingClientRect","locationXY","uniqueKey","i","length","uniqueVal","sortedArray","sortArrayByCardNum","sorting","window","innerWidth","currentScrollLocation","scrollTop","preAnimationArray","postAnimationArray","setElementsXY","preAnimation","destinationIndex","getXYIndexFromUniqueVal","destinationX","destinationY","mainContainerHeight","clientHeight","loopSize","startXByUniqueVal","startYByUniqueVal","xToAdd","Math","abs","yToAdd","cardDeleting","currArr","newCardIndex","random","toString","substr","floor","createRef","cardAdding","cardNoLongerAdding","cardsElements","map","cardSettings","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b77df093.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Footer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Footer</div>\r\n                <div><a href=\"https://github.com/reiddk/blueowl-interview\">https://github.com/reiddk/blueowl-interview</a></div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { cardSettings } from '../cardContainer/cardContainer';\r\nimport './card.css';\r\n\r\n\r\n\r\ninterface CardProp {\r\n    settings: cardSettings,\r\n    deleteCard: any\r\n}\r\nexport default class Card extends React.Component<CardProp> {\r\n\r\n    constructor(props: CardProp) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const classesToAddObj = ['card'];\r\n        let styles = {};\r\n        if (this.props.settings.adding === true) {\r\n            classesToAddObj.push('adding');\r\n        } else if (this.props.settings.adding === false) {\r\n            classesToAddObj.push('added');\r\n        }\r\n        if (this.props.settings.deleting === true) {\r\n            classesToAddObj.push('deleting');\r\n        }\r\n        if (this.props.settings.cardMoving === true) {\r\n            classesToAddObj.push('moving');\r\n            styles = {top:this.props.settings.cardY, left: this.props.settings.cardX};\r\n        }\r\n        if (this.props.settings.hidden === true) {\r\n            classesToAddObj.push('hideCard');\r\n        }\r\n        let addingCard = classesToAddObj.join(\" \");\r\n        return (\r\n            <div ref={this.props.settings.reference} className={`${addingCard} `} style={styles}>\r\n                <div className=\"cardInterior\">\r\n                    <div><span onClick={this.props.deleteCard} className=\"deleteCard\">x</span></div>\r\n                    <div className=\"cardNumberText\">{this.props.settings.cardNum}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { isReturnStatement } from 'typescript';\r\nimport Card from \"../card/card\";\r\nimport \"./cardContainer.css\";\r\n\r\n//re-usable wait function to help organize animations\r\nasync function wait(milliseconds: number):Promise<void> {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve();\r\n        }, milliseconds)\r\n    });\r\n}\r\n//I'd normally use UUID npm library, but I'm \r\n//trying to do this without any libraries other than react\r\nfunction generateUniqueNum() {\r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n    cardsArr: cardSettings[],\r\n    containerHeight: number | null\r\n}\r\n\r\nexport interface cardSettings {\r\n    uniqueVal:string,\r\n    cardNum: number,\r\n    cardMoving: boolean,\r\n    cardX: number | null,\r\n    cardY: number | null,\r\n    destinationX:number | null,\r\n    destinationY:number | null,\r\n    adding: boolean | null,\r\n    deleting: boolean | null,\r\n    hidden: boolean | null,\r\n    postAnimationIndex: number,\r\n    reference: any\r\n}\r\n\r\nexport default class CardContainer extends React.Component<Props, State> {\r\n\r\n    state = {\r\n        cardsArr: [],\r\n        containerHeight: null\r\n    };\r\n\r\n    divElement;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        \r\n        this.setupDelete = this.setupDelete.bind(this);\r\n        this.addCard = this.addCard.bind(this);\r\n        this.sortCards = this.sortCards.bind(this);\r\n    }\r\n\r\n    async deleteCard(indexToRemove: number) {\r\n        const newCardsArr = this.state.cardsArr.filter((card, index) => index !== indexToRemove) as cardSettings[];\r\n        await this.moveCards();\r\n        this.setState({\r\n            cardsArr: newCardsArr\r\n        });\r\n    }\r\n\r\n    sortArrayByCardNum(theArray: cardSettings[]) {\r\n        theArray.sort((a,b) => {\r\n            return a.cardNum - b.cardNum;\r\n        });\r\n    }\r\n\r\n    setElementsXY(theArray: cardSettings[]) {\r\n        for (const setting of theArray) {\r\n            if (!setting?.reference?.current) {\r\n                continue;\r\n            }\r\n            const parentXY = this.divElement.getBoundingClientRect();\r\n            const locationXY = setting.reference.current.getBoundingClientRect();\r\n            setting.cardX = locationXY.left - parentXY.left;\r\n            setting.cardY = locationXY.top - parentXY.top;\r\n        }\r\n    }\r\n\r\n    getXYIndexFromUniqueVal(uniqueKey, theArray: cardSettings[]) {\r\n        for (let i = 0; i < theArray.length; i++) {\r\n            const setting = theArray[i];\r\n            if (setting.uniqueVal === uniqueKey) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    async sortCards() {\r\n        await this.moveCards(true);\r\n        const sortedArray = [...this.state.cardsArr];\r\n        this.sortArrayByCardNum(sortedArray);\r\n        this.setState({\r\n            cardsArr:sortedArray\r\n        });\r\n    }\r\n\r\n\r\n    async moveCards(sorting:boolean = false) {\r\n        if (window.innerWidth < 660 && !sorting) {\r\n            return;\r\n        }\r\n        const currentScrollLocation = this.divElement.scrollTop;\r\n        const preAnimationArray = [...this.state.cardsArr];\r\n        const postAnimationArray = preAnimationArray.filter(setting => {\r\n            return !setting.deleting;\r\n        });\r\n        if (sorting) {\r\n            this.sortArrayByCardNum(postAnimationArray);\r\n        }\r\n        //setting current locations and locations where they will be added\r\n        this.setElementsXY(preAnimationArray);\r\n        this.setElementsXY(postAnimationArray);\r\n        \r\n        //Setting locations where it will be moving using the\r\n        //locations of the post Animation Array\r\n        for (const preAnimation of preAnimationArray) {\r\n            const destinationIndex = this.getXYIndexFromUniqueVal(preAnimation.uniqueVal, postAnimationArray);\r\n            \r\n            if (destinationIndex < 0 || destinationIndex >= preAnimationArray.length) {\r\n                preAnimation.hidden = true;\r\n                continue;\r\n            }\r\n            preAnimation.destinationX = preAnimationArray[destinationIndex].cardX;\r\n            preAnimation.destinationY = preAnimationArray[destinationIndex].cardY;\r\n            preAnimation.cardMoving = true;\r\n        }\r\n        \r\n        let mainContainerHeight = this.divElement.clientHeight;\r\n        if (mainContainerHeight > 800) {\r\n            mainContainerHeight = 800;\r\n        }\r\n        this.setState({\r\n            cardsArr: preAnimationArray,\r\n            containerHeight: mainContainerHeight\r\n        });\r\n        const loopSize = 80;\r\n        const startXByUniqueVal = {};\r\n        const startYByUniqueVal = {};\r\n        for(let i = 0; i < loopSize; i++) {\r\n\r\n            await wait(1);\r\n            for (const preAnimation of preAnimationArray) {\r\n                \r\n                const xToAdd = startXByUniqueVal[preAnimation.uniqueVal] || Math.abs(preAnimation.destinationX - preAnimation.cardX)/loopSize;\r\n                startXByUniqueVal[preAnimation.uniqueVal] = xToAdd;\r\n                \r\n                const yToAdd = startYByUniqueVal[preAnimation.uniqueVal] || Math.abs(preAnimation.destinationY - preAnimation.cardY)/loopSize;\r\n                startYByUniqueVal[preAnimation.uniqueVal] = yToAdd;\r\n                \r\n                    if (preAnimation.destinationX < preAnimation.cardX) {\r\n                        preAnimation.cardX -= xToAdd;\r\n                    } else {\r\n                        preAnimation.cardX += xToAdd;\r\n                    }\r\n                    if (preAnimation.destinationY < preAnimation.cardY) {\r\n                        preAnimation.cardY -= yToAdd;\r\n                    } else {\r\n                        preAnimation.cardY += yToAdd;\r\n                    }\r\n            }\r\n            this.setState({\r\n                cardsArr: preAnimationArray\r\n            });\r\n        }\r\n\r\n        for (const preAnimation of preAnimationArray) {\r\n            preAnimation.cardMoving = false;\r\n            preAnimation.hidden = false;\r\n        }\r\n        this.setState({\r\n            cardsArr: preAnimationArray,\r\n            containerHeight: null\r\n        });\r\n\r\n        this.divElement.scrollTop = currentScrollLocation;\r\n    }\r\n\r\n    async setupDelete(indexToRemove: number) {\r\n        this.cardDeleting(indexToRemove);\r\n        await wait(350);\r\n        this.deleteCard(indexToRemove);\r\n    }\r\n\r\n    cardDeleting(index: number) {\r\n        const currArr = [...this.state.cardsArr];\r\n\r\n        for (let i = 0; i < currArr.length; i++) {\r\n            if (i === index) {\r\n                currArr[i].deleting = true;\r\n            }\r\n        }\r\n        this.setState({\r\n            cardsArr: currArr\r\n        });\r\n    }\r\n\r\n    cardNoLongerAdding(index: number) {\r\n        const currArr = [...this.state.cardsArr];\r\n\r\n        for (let i = 0; i < currArr.length; i++) {\r\n            if (i === index) {\r\n                currArr[i].adding = false;\r\n            }\r\n        }\r\n        this.setState({\r\n            cardsArr: currArr\r\n        });\r\n    }\r\n\r\n    cardAdding(index: number) {\r\n        const currArr = [...this.state.cardsArr];\r\n\r\n        for (let i = 0; i < currArr.length; i++) {\r\n            if (i === index) {\r\n                currArr[i].adding = true;\r\n            }\r\n        }\r\n        this.setState({\r\n            cardsArr: currArr\r\n        });\r\n    }\r\n\r\n    async addCard() {\r\n        const currArr = [...this.state.cardsArr];\r\n        const newCardIndex = currArr.length;\r\n        currArr.push({\r\n            uniqueVal:generateUniqueNum(),\r\n            cardNum: Math.floor(Math.random() * 101),\r\n            cardMoving: false,\r\n            cardX: null,\r\n            cardY: null,\r\n            destinationX:null,\r\n            destinationY:null,\r\n            adding: null,\r\n            hidden:null,\r\n            deleting: false,\r\n            reference: React.createRef()\r\n        });\r\n        this.setState({\r\n            cardsArr: currArr\r\n        });\r\n        await wait(1);\r\n        this.cardAdding(newCardIndex);\r\n        await wait(350);\r\n        this.cardNoLongerAdding(newCardIndex);\r\n    }\r\n\r\n    render() {\r\n        const cardsElements = this.state.cardsArr.map((cardSettings, index) => {\r\n            return <Card key={cardSettings.uniqueVal} settings={cardSettings} deleteCard={() => this.setupDelete(index)}></Card>\r\n        });\r\n        const styles = {};\r\n        if (this.state.containerHeight) {\r\n            styles['height'] = this.state.containerHeight + 'px';\r\n        }\r\n        return (\r\n            <div style={styles} ref={(divElement) => { this.divElement = divElement }} className=\"cardsContainer\">\r\n                <div className=\"cardControl\">\r\n                    <div className=\"buttonContainer\"><button onClick={this.addCard}>add card</button></div>\r\n                    <div className=\"buttonContainer\"><button onClick={this.sortCards}>sort cards</button></div>\r\n                </div>\r\n            <div className=\"cards\">\r\n                {cardsElements}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Footer from './components/footer/footer';\nimport CardContainer from './components/cardContainer/cardContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"cardContainerWrapper\">\n      <CardContainer></CardContainer>\n      </div>\n      <div className=\"instructionsArea\">\n        <h3>Instructions</h3>\n\n        <p>Please create a responsive React application (using javascript or typescript) that displays a list of \n          cards on a page as shown below.</p>\n    <p>There is a fixed-width pane on the right side of the window that remains attached to the right side when the user re-sizes. Inside the pane, please paste a formatted display of these instructions. And if the browser width is small, hide the pane completely.\n</p>\n    <p>There is a fixed-height toolbar on the top of the window that has buttons.\n</p>\n    <p>There is a fixed-height footer on the bottom of the window that just shows the text \"footer\".\n</p>\n    <p>The main center portion of the window is the card container. It should start out with zero cards. Cards are only added when the user clicks 'add card' in the top toolbar. It has a vertical scrollbar which can be used if there are too many cards to display at once. It lays out the cards in rows, wrapping as needed. In this mockup only 2 cards are shown per row, but if the browser is wider, 3 or more cards might fit in a row. If narrower, maybe only 1 card would be visible.\n</p>\n    <p>Each card has a set pixel size, such as 300px by 250px, but you can decide what size you wish to use. Upon instantiation, a card should be given a random number between 0 and 100 and display it in the center of the card.\n</p>\n    <p>Each card has a button in the top-right corner which can be used to delete the card.\n</p>\n    <p>If the user clicks the 'sort cards' button at the top of the page, please sort the cards in order of the number that is shown in the center of each card.\n</p>\n\n \n\n      </div>\n      <div className=\"footerWrapper\">\n      <Footer></Footer>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}